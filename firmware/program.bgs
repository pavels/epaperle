dim busy_flag
dim res
dim port
dim j

dim out(16)

dim batt_tmp(1)
dim conn_handle
dim batresult

dim celsius
dim temp_tmp(2)

procedure write_display_command(command)
  call hardware_io_port_write(1,$1,$0)
  call hardware_spi_transfer(0,1,command)
end

procedure write_display_byte(data)
  call hardware_io_port_write(1,$1,$1)
  call hardware_spi_transfer(0,1,data)
end

procedure write_display_data(len, data())
  call hardware_io_port_write(1,$1,$1)
  call hardware_spi_transfer(0,len,data(0:len))
end

procedure wait_for_bussy()
  busy_flag = 1
  while busy_flag > 0
    call hardware_io_port_read(1, 4)(res, port, busy_flag)
  end while
end

procedure init_display()
  #Bring display from reset
  call hardware_io_port_write(1,$10,$0)
  call hardware_io_port_write(1,$2,$0)
  call hardware_io_port_write(1,$2,$2)
  
  call wait_for_bussy()

  call write_display_command("\x10") #exit deep sleep mode
  call write_display_byte("\x00")

  call write_display_command("\x01")
  call write_display_byte("\xb3")
  call write_display_byte("\x00")

  call write_display_command("\x11")
  call write_display_byte("\x01")

  call write_display_command("\x3a")
  call write_display_byte("\x04")

  call write_display_command("\x44")
  call write_display_byte("\x00")
  call write_display_byte("\x11")

  call write_display_command("\x45")
  call write_display_byte("\xAB")
  call write_display_byte("\x00")

  call write_display_command("\x4E")
  call write_display_byte("\x00")
  
  call write_display_command("\x4F")
  call write_display_byte("\xAB")

  call write_display_command("\xF0") #booster feedback used, in page 37
  call write_display_byte("\x1F")

  call write_display_command("\x2C") #vcom
  call write_display_byte("\xA0")

  call write_display_command("\x3C") #board
  call write_display_byte("\x63")

  call write_display_command("\x32")

  call write_display_data(9, "\x82\x00\x00\x00\xAA\x00\x00\x00\xAA")
  call write_display_data(9, "\xAA\x00\x00\xAA\xAA\xAA\x00\x55\xAA")
  call write_display_data(9, "\xAA\x00\x55\x55\x55\x55\xAA\xAA\xAA")
  call write_display_data(9, "\xAA\x55\x55\x55\x55\xAA\xAA\xAA\xAA")
  call write_display_data(9, "\x15\x15\x15\x15\x05\x05\x05\x05\x01")
  call write_display_data(9, "\x01\x01\x01\x00\x00\x00\x00\x00\x00")
  call write_display_data(9, "\x00\x00\x00\x00\x00\x00\x00\x00\x00")
  call write_display_data(9, "\x00\x00\x00\x00\x00\x00\x00\x00\x00")
  call write_display_data(9, "\x00\x00\x00\x00\x00\x00\x00\x00\x41")
  call write_display_data(9, "\x45\xF1\xFF\x5F\x55\x01\x00\x00\x00")

  call wait_for_bussy()

  call write_display_command("\x24")

  call wait_for_bussy()  
end

procedure update_display()
  call write_display_command("\x21")
  call write_display_byte("\x03")

  call write_display_command("\x22")
  call write_display_byte("\xC7")
 
  call wait_for_bussy()
  
  call write_display_command("\x20")
  call wait_for_bussy()

  call hardware_io_port_write(1,$10,$10)
end

# Boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)

  #Port config
  call hardware_io_port_config_direction(1,$13)

  conn_handle=$ff

  call init_display()
  call update_display()

  # System started, enable advertising and allow connections
  call gap_set_adv_parameters(320, 480, 7)
  call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
  call hardware_set_soft_timer($50000, 2, 1)
end

event hardware_soft_timer(handle)
  if handle = 1
    if conn_handle=$ff
      call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)      
    end if
    call hardware_set_soft_timer($20000, 2, 1)
  end if

  if handle = 2
    call gap_set_mode(0, 0)
    call hardware_set_soft_timer($1E0000, 1, 1)
  end if
  
end

event connection_disconnected(handle, result)
  conn_handle=$ff  
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
    if handle = xgatt_command then
        if value_data(0:1) = 1
          call init_display()
        end if
        if value_data(0:1) = 2
          call update_display()
        end if
    end if
    if handle = xgatt_data then
      out(0:value_len) = value_data(0:value_len)
      call write_display_data(value_len, out(0:value_len))
    end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
  if handle = xgatt_battery
    conn_handle=connection
    call hardware_adc_read(15,3,0)
  end if
  if handle = xgatt_temperature
    conn_handle=connection
    call hardware_adc_read(14,3,0)
  end if  
end

event hardware_adc_result(input,value)
  if (input = 15) then
    #scale value to range 0-100
    #measurement range is 32768=1.15v*3=3.45V
    #new battery ADC measurement is 20912=2.52v
    #minimum battery voltage is 2.0 volts=2.0v/3.45v*32768= 18996
    #20912-18996=1916
    
    batresult=(value-18995)*100/1916
    
    if batresult>100 then
      batresult=100
    end if
    if batresult<0 then
        batresult=0
    end if

    batt_tmp(0:1)=batresult

    if conn_handle<$ff then
      #if connection handle is valid
      call attributes_user_read_response(conn_handle,0,1,batt_tmp(0:1))
      conn_handle=$ff
    end if
  end if

  if (input = 14) then
    # ADC value is 12 MSB
    celsius = value / 16
    # Calculate temperature
    celsius = ((celsius - 1480) * 100) / 450 + 2500
    temp_tmp(0:2) = celsius

    if conn_handle<$ff then
      #if connection handle is valid
      call attributes_user_read_response(conn_handle,0,2,temp_tmp(0:2))
      conn_handle=$ff
    end if    
  end if
end